#summary description of the JsonML AST format used by the es5 parser
#labels Phase-Design,Parser

Abstract syntax trees (ASTs) are generated in [http://jsonml.org JsonML] format and are of the form:

{{{
 [ "Type",
   { key : value properties },
   childNode1,
   childNode2,
   ... ]
}}} 

For an overview of all the different kinds of AST nodes, see the [http://code.google.com/p/es-lab/source/browse/trunk/tests/parser/parsertests.js test-suite] for the parser.

By convention, the last 4 letters of "Type" represent a subtype:
|| Expressions || `*Expr` ||
|| Statements || `*Stmt` ||
|| Declarations || `*Decl` ||
|| Property definitions || `*Prop` ||
|| Patterns || `*Patt` ||
|| Case | DefaultCase || `*Case` (only within a `SwitchStmt`) ||
|| Empty marker || `Empty` (for elisions in Array-literals, omitted parts of a For-statement and names of anonymous function expressions) ||

All use-occurrences of variables appear as `IdExpr` nodes. All defining occurrences of variables appear as `IdPatt` nodes.

The `key:value` attributes of the AST format are used by some nodes:
 
|| `type: string` || in `LiteralExpr` to denote type of literal ||
|| `value: object`|| in `LiteralExpr` to denote value of parsed literal ||
|| `name: string` || in `IdPatt` and `*Prop` to denote the name of a variable or property||
|| `label: string` || in `ContinueStmt`, `BreakStmt` and `LabelledStmt` to denote label name ||
|| `op: string` || in `UnaryExpr`, `BinaryExpr`, `CountExpr` and `AssignExpr` to denote operator punctuator ||
|| `isPrefix: boolean` || in `CountExpr` to denote pre- or postfix operator ||
|| `body: string` || in `RegExpExpr` to denote body of a regexp ||
|| `flags: string` || in `RegExpExpr` to denote flags of a regexp ||

Language processors are allowed to add additional, optional, attributes. Some useful attributes that could be supported for most AST nodes:

|| `x-strict: boolean` || whether this AST occurs in strict code ||
|| `x-line: number` || line number ||
|| `x-column: number` || column number ||
|| `x-source: string` || identifies the source from which the AST was parsed ||
|| `x-comment: string` || attach comment to AST node ||