#summary What is "Secureable EcmaScript 5"?

= What is "Secureable !EcmaScript 5"? =

Informally, it is an ES5 implementation in which [http://code.google.com/p/es-lab/source/browse/#svn/trunk/src/ses initSES.js] succeeds, and in which that success results in an object-capability safe environment for untrusted code imported through the resulting `eval` or `Function`.

Beyond being simply a conforming ES5 implementation, the additional constraints:
  * All properties on accessible primordial objects (primordial objects other than the global object) must be deleteable. The `initSES.js` script will delete all properties not on its whitelist, where its whitelist (at the time of this writing) includes exactly the global names and path names specified in ES5.
  * Of the objects that survive this step, i.e., those named by that whitelist, any additional behaviors they may have beyond that specified in ES5 must not imply they provide authority exceeding what their specified behavior by itself would provide. For example, the [http://code.google.com/p/google-caja/issues/detail?id=528 global-state behavior] of `RegExp.prototype.exec` on some browsers, while not violating the ES5 spec, would cause such an ES5 system to not be classified as a _Secureable ES5 system_.
  * *What else???*

= What the resulting SES (Secure !EcmaScript)? =

In a frame of a secureable ES5 in which [http://code.google.com/p/es-lab/source/browse/#svn/trunk/src/ses initSES.js] has been run, either prior to other scripts or in cooperation with other scripts, the resulting "language" as seen by that frame's new `eval` and `Function` bindings differs from full ES5 in the following ways:
   # All properties of accessible primordials not defined by the ES5 spec are absent, even if the browser originally provided them.
   # All accessible primordials (all primordials other than the global object) are frozen.
   # The global variables defined by the ES5 spec are effectively `const`. The corresponding properties of the global object are frozen, though the global object is not frozen as a whole.
   # All code is only in the strict subset of ES5, whether it so declares or not.
   # The top level binding of `this` in an evaled Program is not the global object, but rather a frozen root object containing just the globals defined in the ES5 spec.
   # Only the global variables defined by the ES5 spec are addressable as free variables.
   # Any top level `var` or `function` declarations in an evaled Program are visible throughout that one Program, but not to other Programs not to the global object.

By analogy with Operating systems, let's call code imported through `eval` or `Function` _user code_ and code run directly in the frame, not through `eval` or `Function`, _privileged code_. The first three restrictions above apply to privileged code in that frame as well. However, since privileged code is able address the real global object and its host-defined properties, it still has access to the authority the browser provides to !JavaScript executing in that frame. It is therefore in a position to subdivide this authority, and hand out the resulting attenuated authority to the imported user code, on a least authority basis, by providing it objects whose behavior represents this attenuated authority.